<?xml version="1.0" encoding="UTF-8"?>
<proofMetaFile proofFileMD5="425e8f8a7a4742ee56e271809fb81b48" proofClosed="true" proofOutdated="false">
   <markerMessage>
Closed Proof:
java.util.VerifiedIdentityHashMap.KeySet[java.util.Set::remove(java.lang.Object)].JML behavior operation contract.0

Time: 0.265 s
Nodes: 166
Branches: 18
   </markerMessage>
   <usedContracts>
      <usedContract proofFile="/IM9906 - VerifyingIdentityHashMap/proofs/java/util/VerifiedIdentityHashMap.java/java_util_VerifiedIdentityHashMap_KeySet[java_util_Set__remove(java_lang_Object)]_JML_behavior_operation_contract_0.proof"/>
      <usedContract proofFile="/IM9906 - VerifyingIdentityHashMap/proofs/java/util/VerifiedIdentityHashMap.java/java_util_VerifiedIdentityHashMap_KeySet[java_util_Collection__remove(java_lang_Object)]_JML_behavior_operation_contract_0.proof"/>
   </usedContracts>
   <references rep="pre: {heap=and(java.lang.Object::&lt;inv&gt;(heap,self),not(equals(param0,null)))}; mby: null; post: {heap=and(imp(equals(exc,null),java.lang.Object::&lt;inv&gt;(heap,self)),imp(not(equals(exc,null)),and(imp(equals(java.lang.Throwable::instance(exc),TRUE),java.lang.Object::&lt;inv&gt;(heap,self)),or(equals(java.lang.Error::instance(exc),TRUE),equals(java.lang.RuntimeException::instance(exc),TRUE)))))}; mods: {heap=setMinus(allLocs,freshLocs(heap)), savedHeap=null}; hasMod: {heap=true, savedHeap=true}; termination: diamond; transaction: false">
      <type name="java.util.VerifiedIdentityHashMap.KeySet">
         <axiomReferences>
            <axiomReference kjt="java.util.VerifiedIdentityHashMap.KeySet" name="Class invariant axiom for java.util.VerifiedIdentityHashMap.KeySet" rep="equiv(java.lang.Object::&lt;inv&gt;(heap,self),true)"/>
         </axiomReferences>
         <inlineMethodReferences>
            <inlineMethodReference kjt="java.util.VerifiedIdentityHashMap.KeySet" name="remove" parameters="Object;" src="publicbooleanremove (Object o) {int oldSize = this.size;VerifiedIdentityHashMap.this.remove(o);return this.size!=oldSize;}"/>
         </inlineMethodReferences>
         <contractReferences>
            <contractReference kjt="java.util.VerifiedIdentityHashMap.KeySet" name="java.util.VerifiedIdentityHashMap.KeySet[java.util.Collection::remove(java.lang.Object)].JML behavior operation contract.0#java.util.VerifiedIdentityHashMap.KeySet[java.util.Set::remove(java.lang.Object)].JML behavior operation contract.0" rep="pre: {heap=or(and(java.lang.Object::&lt;inv&gt;(heap,self),not(equals(param0,null))),and(java.lang.Object::&lt;inv&gt;(heap,self),not(equals(param0,null))))}; mby: null; post: {heap=and(imp(and(java.lang.Object::&lt;inv&gt;(heapAtPre,self),not(equals(param0,null))),and(imp(equals(exc,null),java.lang.Object::&lt;inv&gt;(heap,self)),imp(not(equals(exc,null)),and(imp(equals(java.lang.Throwable::instance(exc),TRUE),java.lang.Object::&lt;inv&gt;(heap,self)),or(equals(java.lang.Error::instance(exc),TRUE),equals(java.lang.RuntimeException::instance(exc),TRUE)))))),imp(and(java.lang.Object::&lt;inv&gt;(heapAtPre,self),not(equals(param0,null))),and(imp(equals(exc,null),java.lang.Object::&lt;inv&gt;(heap,self)),imp(not(equals(exc,null)),and(imp(equals(java.lang.Throwable::instance(exc),TRUE),java.lang.Object::&lt;inv&gt;(heap,self)),or(equals(java.lang.Error::instance(exc),TRUE),equals(java.lang.RuntimeException::instance(exc),TRUE)))))))}; mods: {heap=intersect(if-then-else(and(java.lang.Object::&lt;inv&gt;(heap,self),not(equals(param0,null))),intersect(if-then-else(and(java.lang.Object::&lt;inv&gt;(heap,self),not(equals(param0,null))),setMinus(allLocs,freshLocs(heap)),allLocs),if-then-else(and(java.lang.Object::&lt;inv&gt;(heap,self),not(equals(param0,null))),setMinus(allLocs,freshLocs(heap)),allLocs)),allLocs),if-then-else(and(java.lang.Object::&lt;inv&gt;(heap,self),not(equals(param0,null))),setMinus(allLocs,freshLocs(heap)),allLocs)), savedHeap=null}; hasMod: {heap=true, savedHeap=true}; termination: diamond; transaction: false"/>
         </contractReferences>
      </type>
      <type name="java.util.VerifiedIdentityHashMap">
         <accessReferences>
            <accessReference kjt="java.util.VerifiedIdentityHashMap" name="java.util.VerifiedIdentityHashMap::size" type="int" visibility="private" isStatic="false" isFinal="false" initializer=""/>
         </accessReferences>
      </type>
   </references>
</proofMetaFile>
