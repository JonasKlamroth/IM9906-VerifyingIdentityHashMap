<?xml version="1.0" encoding="UTF-8"?>
<proofMetaFile proofFileMD5="6fadda0daf6fad2e1a9597d67841657a" proofClosed="false" proofOutdated="false">
   <markerMessage>
Open Proof:
java.util.VerifiedIdentityHashMap.EntryIterator[java.util.Iterator::remove()].JML behavior operation contract.0

Reason: Goal can&apos;t be closed automatically.
Hint: Check code and specifications for bugs or continue proof interactively.

Time: 0.506 s
Nodes: 347
Branches: 20
   </markerMessage>
   <calledMethods>
      <calledMethod fullQualifiedName="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator#remove()"/>
   </calledMethods>
   <assumptions>
      <assumption kind="Use Contract" name="JML behavior operation contract 0" target="NullPointerException()" type="java.lang.NullPointerException"/>
   </assumptions>
   <references rep="pre: {heap=java.lang.Object::&lt;inv&gt;(heap,self)}; mby: null; post: {heap=and(imp(equals(exc,null),java.lang.Object::&lt;inv&gt;(heap,self)),imp(not(equals(exc,null)),and(imp(equals(java.lang.Throwable::instance(exc),TRUE),java.lang.Object::&lt;inv&gt;(heap,self)),or(equals(java.lang.Error::instance(exc),TRUE),equals(java.lang.RuntimeException::instance(exc),TRUE)))))}; mods: {heap=setMinus(allLocs,freshLocs(heap)), savedHeap=null}; hasMod: {heap=true, savedHeap=true}; termination: diamond; transaction: false">
      <callMethodReferences>
         <callMethodReference kjt="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator" name="remove" parameters="" implementations="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator;java.util.VerifiedIdentityHashMap.EntryIterator;"/>
      </callMethodReferences>
      <type name="java.util.VerifiedIdentityHashMap.EntryIterator">
         <axiomReferences>
            <axiomReference kjt="java.util.VerifiedIdentityHashMap.EntryIterator" name="Class invariant axiom for java.util.VerifiedIdentityHashMap.EntryIterator" rep="equiv(java.lang.Object::&lt;inv&gt;(heap,self),not(equals(java.util.VerifiedIdentityHashMap.EntryIterator.Entry::select(heap,self,java.util.VerifiedIdentityHashMap.EntryIterator::$lastReturnedEntry),null)))"/>
         </axiomReferences>
         <accessReferences>
            <accessReference kjt="java.util.VerifiedIdentityHashMap.EntryIterator" name="java.util.VerifiedIdentityHashMap.EntryIterator::lastReturnedEntry" type="Entry" visibility="private" isStatic="false" isFinal="false" initializer=""/>
         </accessReferences>
         <inlineMethodReferences>
            <inlineMethodReference kjt="java.util.VerifiedIdentityHashMap.EntryIterator" name="remove" parameters="" src="public void remove () {this.lastReturnedIndex=((null==this.lastReturnedEntry) ?-1 :this.lastReturnedEntry.index);super.remove();this.lastReturnedEntry.index=this.lastReturnedIndex;this.lastReturnedEntry=null;}"/>
         </inlineMethodReferences>
      </type>
      <type name="java.util.VerifiedIdentityHashMap.EntryIterator.Entry">
         <accessReferences>
            <accessReference kjt="java.util.VerifiedIdentityHashMap.EntryIterator.Entry" name="java.util.VerifiedIdentityHashMap.EntryIterator.Entry::index" type="int" visibility="private" isStatic="false" isFinal="false" initializer=""/>
         </accessReferences>
      </type>
      <type name="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator">
         <accessReferences>
            <accessReference kjt="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator" name="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator::lastReturnedIndex" type="int" visibility="" isStatic="false" isFinal="false" initializer=""/>
            <accessReference kjt="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator" name="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator::expectedModCount" type="int" visibility="" isStatic="false" isFinal="false" initializer=""/>
            <accessReference kjt="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator" name="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator::index" type="int" visibility="" isStatic="false" isFinal="false" initializer=""/>
            <accessReference kjt="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator" name="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator::indexValid" type="boolean" visibility="" isStatic="false" isFinal="false" initializer=""/>
            <accessReference kjt="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator" name="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator::traversalTable" type="" visibility="" isStatic="false" isFinal="false" initializer=""/>
         </accessReferences>
         <inlineMethodReferences>
            <inlineMethodReference kjt="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator" name="remove" parameters="" src="public void remove () {if (this.lastReturnedIndex==-1)                 throw  new  IllegalStateException ();             if (this.modCount!=this.expectedModCount)                 throw  new  ConcurrentModificationException ();   this.expectedModCount=++this.modCount;   int deletedSlot = this.lastReturnedIndex;   this.lastReturnedIndex=-1;   this.index=deletedSlot;   this.indexValid=false;  java.lang.Object[] tab = this.traversalTable;   int len = tab.length;   int d = deletedSlot;java.lang.Object key = (java.lang.Object)tab[d];   tab[d]=null;   tab[d+1]=null;             if (tab!=VerifiedIdentityHashMap.this.table) {     VerifiedIdentityHashMap.this. remove(key);     this.expectedModCount=this.modCount;                 return ;   }   this.size--;   Object item;             for ( int i = nextKeyIndex(d,len); (item=tab[i])!=null; i=nextKeyIndex(i,len) ) {     int r = hash(item,len);                 if ((i&lt;r&amp;&amp;(r&lt;=d||d&lt;=i))||(r&lt;=d&amp;&amp;d&lt;=i)) {                      if (i&lt;deletedSlot&amp;&amp;d&gt;=deletedSlot&amp;&amp;this.traversalTable==VerifiedIdentityHashMap.this.table) {         int remaining = len-deletedSlot;        java.lang.Object[] newTable = new Object[remaining];         System.arraycopy(tab,deletedSlot,newTable,0,remaining);         this.traversalTable=newTable;         this.index=0;       }       tab[d]=item;       tab[d+1]=tab[i+1];       tab[i]=null;       tab[i+1]=null;       d=i;     }   } }"/>
         </inlineMethodReferences>
      </type>
      <type name="java.util.VerifiedIdentityHashMap">
         <accessReferences>
            <accessReference kjt="java.util.VerifiedIdentityHashMap" name="java.util.VerifiedIdentityHashMap::modCount" type="int" visibility="private" isStatic="false" isFinal="false" initializer=""/>
         </accessReferences>
      </type>
   </references>
</proofMetaFile>
