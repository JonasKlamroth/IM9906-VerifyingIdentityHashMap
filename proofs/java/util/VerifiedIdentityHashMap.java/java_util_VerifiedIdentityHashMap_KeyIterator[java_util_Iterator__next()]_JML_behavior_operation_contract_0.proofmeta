<?xml version="1.0" encoding="UTF-8"?>
<proofMetaFile proofFileMD5="fb7d573054a9fb016fd3fae73d973ada" proofClosed="false" proofOutdated="false">
   <markerMessage>
Open Proof:
java.util.VerifiedIdentityHashMap.KeyIterator[java.util.Iterator::next()].JML behavior operation contract.0

Reason: Goal can&apos;t be closed automatically.
Hint: Check code and specifications for bugs or continue proof interactively.

Time: 0.754 s
Nodes: 728
Branches: 42
   </markerMessage>
   <usedContracts>
      <usedContract proofFile="/IM9906 - VerifyingIdentityHashMap/proofs/java/util/VerifiedIdentityHashMap.java/java_util_VerifiedIdentityHashMap_IdentityHashMapIterator[java_util_Iterator__hasNext()]_JML_behavior_operation_contract_0.proof"/>
   </usedContracts>
   <calledMethods>
      <calledMethod fullQualifiedName="java.util.VerifiedIdentityHashMap#unmaskNull(java.lang.Object)"/>
      <calledMethod fullQualifiedName="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator#nextIndex()"/>
   </calledMethods>
   <assumptions>
      <assumption kind="Use Contract" name="JML behavior operation contract 0" target="NullPointerException()" type="java.lang.NullPointerException"/>
      <assumption kind="Use Contract" name="JML behavior operation contract 0" target="ArrayIndexOutOfBoundsException()" type="java.lang.ArrayIndexOutOfBoundsException"/>
   </assumptions>
   <references rep="pre: {heap=java.lang.Object::&lt;inv&gt;(heap,self)}; mby: null; post: {heap=and(imp(equals(exc,null),and(java.lang.Object::&lt;inv&gt;(heap,self),not(equals(result,null)))),imp(not(equals(exc,null)),and(imp(equals(java.lang.Throwable::instance(exc),TRUE),java.lang.Object::&lt;inv&gt;(heap,self)),or(equals(java.lang.Error::instance(exc),TRUE),equals(java.lang.RuntimeException::instance(exc),TRUE)))))}; mods: {heap=setMinus(allLocs,freshLocs(heap)), savedHeap=null}; hasMod: {heap=true, savedHeap=true}; termination: diamond; transaction: false">
      <callMethodReferences>
         <callMethodReference kjt="java.util.VerifiedIdentityHashMap" name="unmaskNull" parameters="Object;" implementations="java.util.VerifiedIdentityHashMap;"/>
         <callMethodReference kjt="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator" name="nextIndex" parameters="" implementations="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator;"/>
      </callMethodReferences>
      <type name="java.util.VerifiedIdentityHashMap.KeyIterator">
         <axiomReferences>
            <axiomReference kjt="java.util.VerifiedIdentityHashMap.KeyIterator" name="Class invariant axiom for java.util.VerifiedIdentityHashMap.KeyIterator" rep="equiv(java.lang.Object::&lt;inv&gt;(heap,self),true)"/>
         </axiomReferences>
         <inlineMethodReferences>
            <inlineMethodReference kjt="java.util.VerifiedIdentityHashMap.KeyIterator" name="next" parameters="" src="publicjava.lang.Objectnext () {return (java.lang.Object)unmaskNull(this.traversalTable[nextIndex()]);}"/>
         </inlineMethodReferences>
      </type>
      <type name="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator">
         <accessReferences>
            <accessReference kjt="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator" name="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator::traversalTable" type="" visibility="" isStatic="false" isFinal="false" initializer=""/>
            <accessReference kjt="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator" name="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator::expectedModCount" type="int" visibility="" isStatic="false" isFinal="false" initializer=""/>
            <accessReference kjt="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator" name="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator::indexValid" type="boolean" visibility="" isStatic="false" isFinal="false" initializer=""/>
            <accessReference kjt="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator" name="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator::index" type="int" visibility="" isStatic="false" isFinal="false" initializer=""/>
            <accessReference kjt="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator" name="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator::lastReturnedIndex" type="int" visibility="" isStatic="false" isFinal="false" initializer=""/>
         </accessReferences>
         <inlineMethodReferences>
            <inlineMethodReference kjt="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator" name="nextIndex" parameters="" src="protectedintnextIndex () {if (this.modCount!=this.expectedModCount)                 throw  new  ConcurrentModificationException ();             if (!this.indexValid&amp;&amp;!hasNext())                 throw  new  NoSuchElementException ();   this.indexValid=false;   this.lastReturnedIndex=this.index;   this.index+=2;             return  this.lastReturnedIndex; }"/>
         </inlineMethodReferences>
         <contractReferences>
            <contractReference kjt="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator" name="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator[java.util.Iterator::hasNext()].JML behavior operation contract.0" rep="pre: {heap=java.lang.Object::&lt;inv&gt;(heap,self)}; mby: null; post: {heap=and(imp(equals(exc,null),java.lang.Object::&lt;inv&gt;(heap,self)),imp(not(equals(exc,null)),and(imp(equals(java.lang.Throwable::instance(exc),TRUE),java.lang.Object::&lt;inv&gt;(heap,self)),or(equals(java.lang.Error::instance(exc),TRUE),equals(java.lang.RuntimeException::instance(exc),TRUE)))))}; mods: {heap=setMinus(allLocs,freshLocs(heap)), savedHeap=null}; hasMod: {heap=true, savedHeap=true}; termination: diamond; transaction: false"/>
         </contractReferences>
      </type>
      <type name="java.util.VerifiedIdentityHashMap">
         <accessReferences>
            <accessReference kjt="java.util.VerifiedIdentityHashMap" name="java.util.VerifiedIdentityHashMap::modCount" type="int" visibility="private" isStatic="false" isFinal="false" initializer=""/>
            <accessReference kjt="java.util.VerifiedIdentityHashMap" name="java.util.VerifiedIdentityHashMap::NULL_KEY" type="Object" visibility="private" isStatic="true" isFinal="true" initializer="new Object ()"/>
         </accessReferences>
         <inlineMethodReferences>
            <inlineMethodReference kjt="java.util.VerifiedIdentityHashMap" name="unmaskNull" parameters="Object;" src="privatestaticObjectunmaskNull (Object key) {return (key==NULL_KEY ?null :key);}"/>
         </inlineMethodReferences>
      </type>
   </references>
</proofMetaFile>
