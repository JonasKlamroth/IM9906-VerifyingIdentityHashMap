\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Tue May 05 19:53:08 CEST 2020
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=assertions-assertions\\:on , initialisation-initialisation\\:disableStaticInitialisation , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java , runtimeExceptions-runtimeExceptions\\:allow , JavaCard-JavaCard\\:off , Strings-Strings\\:on , modelFields-modelFields\\:showSatisfiability , bigint-bigint\\:on , sequences-sequences\\:on , moreSeqRules-moreSeqRules\\:off , reach-reach\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , wdOperator-wdOperator\\:L , wdChecks-wdChecks\\:off , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=10000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_NONCLOSE
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[Strategy]Timeout=-1
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\bootclasspath "../../../../jre";

\javaSource "../../../../src";

\proofObligation "#Proof Obligation Settings
#Tue May 05 19:53:08 CEST 2020
contract=java.util.VerifiedIdentityHashMap[java.util.AbstractMap\\:\\:clone()].JML behavior operation contract.0
name=java.util.VerifiedIdentityHashMap[java.util.AbstractMap\\:\\:clone()].JML behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "martindeboer" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "1522")

(branch "dummy ID"
(builtin "One Step Simplification" (formula "1") (newnames "self,result,exc,heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "eqSymm" (formula "7") (term "1,0,0,1,0,1"))
(rule "assignment" (formula "7") (term "1"))
(builtin "One Step Simplification" (formula "7"))
(rule "elementOfSetMinus" (formula "7") (term "0,0,0,0,1,0,1"))
(builtin "One Step Simplification" (formula "7"))
(rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "5") (inst "sk=sk_0") (ifseqformula "3"))
(branch "Use Axiom"
   (rule "andLeft" (formula "5"))
   (rule "notLeft" (formula "6"))
   (rule "andLeft" (formula "5"))
   (rule "notLeft" (formula "6"))
   (rule "nonNull" (formula "5") (inst "i=i"))
   (rule "greater_literals" (formula "5") (term "0,1"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "sub_literals" (formula "5") (term "2,1,0,1"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "andLeft" (formula "5"))
   (rule "notLeft" (formula "5"))
   (rule "inEqSimp_ltToLeq" (formula "5") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1,0,0"))
   (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "1,0,0"))
   (rule "polySimp_mulComm0" (formula "5") (term "1,1,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
   (rule "mul_literals" (formula "5") (term "0,1,1,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,1,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1,1,0,0"))
   (rule "nnf_imp2or" (formula "5") (term "0"))
   (rule "nnf_notAnd" (formula "5") (term "0,0"))
   (rule "inEqSimp_notGeq" (formula "5") (term "0,0,0"))
   (rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
   (rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,0"))
   (rule "mul_literals" (formula "5") (term "1,0,0,0"))
   (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
   (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1,0,0"))
   (rule "mul_literals" (formula "5") (term "0,1,0,0,1,0,0"))
   (rule "polySimp_addAssoc" (formula "5") (term "0,0,1,0,0"))
   (rule "add_literals" (formula "5") (term "0,0,0,1,0,0"))
   (rule "add_zero_left" (formula "5") (term "0,0,1,0,0"))
   (rule "inEqSimp_sepPosMonomial1" (formula "5") (term "1,0,0"))
   (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0"))
   (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0"))
   (rule "commute_or_2" (formula "5") (term "0"))
   (rule "commute_or" (formula "5") (term "0,0"))
   (rule "methodBodyExpand" (formula "10") (term "1") (newnames "heapBefore_clone,savedHeapBefore_clone"))
   (builtin "One Step Simplification" (formula "10"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "m"))
   (rule "compound_reference_cast_expression" (formula "10") (term "1") (inst "#v=o"))
   (rule "variableDeclarationAssign" (formula "10") (term "1"))
   (rule "variableDeclaration" (formula "10") (term "1") (newnames "o"))
   (builtin "Use Operation Contract" (formula "10") (newnames "heapBefore_clone_0,result_0,exc_0,heapAfter_clone,anon_heap_clone") (contract "java.util.AbstractMap[java.lang.Object::clone()].JML behavior operation contract.0#java.util.AbstractMap[java.util.AbstractMap::clone()].JML behavior operation contract.0"))
   (branch "Post (clone)"
      (builtin "One Step Simplification" (formula "12"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,1,0") (ifseqformula "7"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "8"))
      (rule "typeEqDerived" (formula "10") (term "0,0,1,1,1,1") (ifseqformula "8"))
      (rule "typeEqDerived" (formula "10") (term "0,1,1,1,1,1") (ifseqformula "8"))
      (rule "typeEqDerived" (formula "11") (term "0,1,1,1,1,1") (ifseqformula "8"))
      (rule "typeEqDerived" (formula "11") (term "0,0,0,1,1,1,1") (ifseqformula "8"))
      (rule "typeEqDerived" (formula "11") (term "0,1,0,1,1,1,1") (ifseqformula "8"))
      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "8")) (ifInst ""  (formula "8")))
      (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "8")) (ifInst ""  (formula "8")))
      (rule "assignment" (formula "16") (term "1"))
      (builtin "One Step Simplification" (formula "16"))
      (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "7") (term "0,1,0") (inst "sk=sk_8") (ifseqformula "3"))
      (branch "Use Axiom"
         (rule "replace_known_right" (formula "7") (term "0,1,0,1,0") (ifseqformula "14"))
         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "13")))
         (rule "nonNull" (formula "7") (term "0,1,0") (inst "i=i"))
         (rule "greater_literals" (formula "7") (term "0,1,0,1,0"))
         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "12")))
         (rule "sub_literals" (formula "7") (term "2,1,0,0,1,0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "7") (term "0,1,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,0,1,0"))
         (rule "nnf_imp2or" (formula "7") (term "0,0,1,0"))
         (rule "nnf_notAnd" (formula "7") (term "0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,0,1,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,0,1,0"))
         (rule "add_zero_left" (formula "7") (term "0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,0,1,0"))
         (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,0,1,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,0,1,0"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0,0,1,0"))
         (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "10") (term "0,1") (inst "sk=sk_9") (ifseqformula "3"))
         (branch "Use Axiom"
            (rule "nonNull" (formula "10") (term "0,0,0,1") (inst "i=i"))
            (rule "greater_literals" (formula "10") (term "0,1,0,0,0,1"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "sub_literals" (formula "10") (term "2,1,0,1,0,0,0,1"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0,0,0,1"))
            (rule "pullOutSelect" (formula "10") (term "0,0,1,0,0,1") (inst "selectSK=java_util_VerifiedIdentityHashMap_NULL_KEY_1"))
            (rule "simplifySelectOfAnonEQ" (formula "10") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "10"))
            (rule "pullOutSelect" (formula "11") (term "0,0,1,0,1") (inst "selectSK=java_util_VerifiedIdentityHashMap_entrySet_1"))
            (rule "simplifySelectOfAnonEQ" (formula "11") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "17")) (ifInst ""  (formula "2")))
            (rule "pullOutSelect" (formula "12") (term "1,0,0,1,0,1,0,0,0,1") (inst "selectSK=java_util_VerifiedIdentityHashMap_table_1"))
            (rule "applyEq" (formula "13") (term "0,0,0,0,0,0,1") (ifseqformula "12"))
            (rule "applyEq" (formula "13") (term "0,1,1,1,0,0,1,0,0,0,1") (ifseqformula "12"))
            (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "7"))
            (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "18")) (ifInst ""  (formula "2")))
            (rule "nnf_imp2or" (formula "13") (term "0,1,0,0,0,1"))
            (rule "nnf_notAnd" (formula "13") (term "0,0,1,0,0,0,1"))
            (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0,0,0,1"))
            (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,1,0,0,0,1"))
            (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0,0,1"))
            (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0,0,0,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0,0,0,1"))
            (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0,0,0,1"))
            (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0,0,0,1"))
            (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0,0,0,1"))
            (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0,0,0,1"))
            (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,0,0,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0,0,0,1"))
            (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "14") (term "0") (inst "sk=sk_10") (ifseqformula "3"))
            (branch "Use Axiom"
               (rule "replace_known_right" (formula "14") (term "0,1,0,0") (ifseqformula "16"))
               (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "17")))
               (rule "nonNull" (formula "14") (term "0") (inst "i=i"))
               (rule "sub_literals" (formula "14") (term "2,1,0,1,1,0"))
               (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")))
               (rule "greater_literals" (formula "14") (term "0,0"))
               (builtin "One Step Simplification" (formula "14"))
               (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,0"))
               (rule "nnf_imp2or" (formula "14") (term "0,0"))
               (rule "nnf_notAnd" (formula "14") (term "0,0,0"))
               (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,0"))
               (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,0"))
               (rule "add_zero_right" (formula "14") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,0"))
               (rule "mul_literals" (formula "14") (term "1,0,0,0,0"))
               (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,0"))
               (rule "shift_paren_or" (formula "9"))
               (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "14") (term "0,1") (inst "sk=sk_11") (ifseqformula "3"))
               (branch "Use Axiom"
                  (rule "replaceKnownSelect_taclet0000_2" (formula "14") (term "1,0,0,0,1"))
                  (rule "replaceKnownSelect_taclet0000_1" (formula "14") (term "0,0,1,0,1"))
                  (rule "replaceKnownSelect_taclet0000_0" (formula "14") (term "0,0,1,0,0,1"))
                  (rule "nonNull" (formula "14") (term "0,0,0,1") (inst "i=i"))
                  (rule "sub_literals" (formula "14") (term "2,1,0,1,1,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "greater_literals" (formula "14") (term "0,1,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "14"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "0,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,1,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "14") (term "0,1,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,1,0,0,1,0,0,0,1"))
                  (rule "nnf_imp2or" (formula "14") (term "0,1,0,0,0,1"))
                  (rule "nnf_notAnd" (formula "14") (term "0,0,1,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "14") (term "1,0,0,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "14") (term "0,1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "14") (term "0,0,1,0,0,1,0,0,0,1"))
                  (rule "add_literals" (formula "14") (term "0,0,0,1,0,0,1,0,0,0,1"))
                  (rule "add_zero_left" (formula "14") (term "0,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "14") (term "1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "14") (term "0,0,0,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "14") (term "1,0,0,0,0,0,1,0,0,0,1"))
                  (rule "add_literals" (formula "14") (term "0,0,0,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "14") (term "1,0,0,0,1,0,0,0,1"))
                  (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "13") (term "0") (inst "sk=sk_12") (ifseqformula "3"))
                  (branch "Use Axiom"
                     (rule "replace_known_right" (formula "13") (term "0,1,0,0") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "17")))
                     (rule "nonNull" (formula "13") (term "0") (inst "i=i"))
                     (rule "sub_literals" (formula "13") (term "2,1,0,1,1,0"))
                     (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "15")))
                     (rule "greater_literals" (formula "13") (term "0,0"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,0,0,0"))
                     (rule "inEqSimp_commuteLeq" (formula "13") (term "0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,0,0,0"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,1,0,0,0"))
                     (rule "nnf_imp2or" (formula "13") (term "0,0"))
                     (rule "nnf_notAnd" (formula "13") (term "0,0,0"))
                     (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,0"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,0"))
                     (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,0"))
                     (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,0"))
                     (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,0"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,0"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,0"))
                     (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,0"))
                     (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,0"))
                     (rule "add_zero_right" (formula "13") (term "0,0,0,0,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,0"))
                     (rule "mul_literals" (formula "13") (term "1,0,0,0,0"))
                     (rule "commute_or_2" (formula "7") (term "0,0,1,0"))
                     (rule "reference_type_cast" (formula "19") (term "1"))
                     (branch "Normal Execution (o instanceof VerifiedIdentityHashMap)"
                        (opengoal " ")
                     )
                     (branch "ClassCastException (!(o instanceof VerifiedIdentityHashMap))"
                        (builtin "One Step Simplification" (formula "20"))
                        (builtin "One Step Simplification" (formula "19"))
                        (rule "orRight" (formula "19"))
                        (rule "replace_known_right" (formula "14") (term "0,1,1") (ifseqformula "19"))
                        (builtin "One Step Simplification" (formula "14"))
                        (rule "replace_known_right" (formula "9") (term "0,0") (ifseqformula "19"))
                        (builtin "One Step Simplification" (formula "9"))
                        (rule "commute_or_2" (formula "10") (term "0,0,2,0,0"))
                        (rule "commute_or_2" (formula "11") (term "0,0,2,0,0"))
                        (rule "commute_or_2" (formula "12") (term "0,0,2,0,0"))
                        (rule "commute_or_2" (formula "13") (term "0,0"))
                        (rule "commute_or_2" (formula "14") (term "0,0"))
                        (rule "commute_or" (formula "13") (term "0,0,0"))
                        (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "notLeft" (formula "14"))
                        (rule "andLeft" (formula "13"))
                        (rule "andLeft" (formula "13"))
                        (rule "notLeft" (formula "15"))
                        (rule "notLeft" (formula "13"))
                        (rule "replace_known_right" (formula "15") (term "0,1,1") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "16")) (ifInst ""  (formula "13")) (ifInst ""  (formula "17")))
                        (rule "true_left" (formula "15"))
                        (rule "commute_or_2" (formula "13") (term "0"))
                        (rule "commute_or" (formula "13") (term "0,0"))
                        (rule "commute_or" (formula "7") (term "0,0,0,1,0"))
                        (rule "replace_known_left" (formula "7") (term "0,1,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "7"))
                        (rule "commute_or" (formula "10") (term "0,0,0,2,0,0"))
                        (rule "replace_known_left" (formula "10") (term "0,2,0,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "elementOfSetMinus" (formula "10") (term "0,0"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "10"))
                        (rule "hideAuxiliaryEq" (formula "10"))
                        (rule "commute_or" (formula "10") (term "0,0,0,2,0,0"))
                        (rule "replace_known_left" (formula "10") (term "0,2,0,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "elementOfSetMinus" (formula "10") (term "0,0"))
                        (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "20")) (ifInst ""  (formula "2")))
                        (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "10"))
                        (rule "hideAuxiliaryEq" (formula "10"))
                        (rule "commute_or" (formula "10") (term "0,0,0,2,0,0"))
                        (rule "replace_known_left" (formula "10") (term "0,2,0,0") (ifseqformula "5"))
                        (builtin "One Step Simplification" (formula "10"))
                        (rule "elementOfSetMinus" (formula "10") (term "0,0"))
                        (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "19")) (ifInst ""  (formula "2")))
                        (rule "applyEqReverse" (formula "11") (term "1,0,0,0,0,0") (ifseqformula "10"))
                        (rule "applyEqReverse" (formula "13") (term "0") (ifseqformula "10"))
                        (rule "applyEqReverse" (formula "11") (term "0,1,1,0") (ifseqformula "10"))
                        (rule "hideAuxiliaryEq" (formula "10"))
                        (rule "arrayLengthIsAnInt" (formula "5") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "5"))
                        (rule "true_left" (formula "5"))
                        (rule "arrayLengthNotNegative" (formula "5") (term "1,1,0"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "16") (term "0") (ifseqformula "1"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "17"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "2"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "3"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "arrayLengthNotNegative" (formula "14") (term "1,1,0"))
                        (rule "arrayLengthIsAnInt" (formula "15") (term "1,1,0"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "0,1,1,0") (ifseqformula "10"))
                        (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "18"))
                        (builtin "One Step Simplification" (formula "15"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "10"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "20"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "11"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "22"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "throwUnfold" (formula "29") (term "1") (inst "#v0=c"))
                        (rule "variableDeclarationAssign" (formula "29") (term "1"))
                        (rule "variableDeclaration" (formula "29") (term "1") (newnames "c"))
                        (builtin "Use Operation Contract" (formula "29") (newnames "heapBefore_ClassCastException,self_0,exc_1,heapAfter_ClassCastException,anon_heap_ClassCastException") (contract "java.lang.ClassCastException[java.lang.ClassCastException::ClassCastException()].JML behavior operation contract.0"))
                        (branch "Post (ClassCastException)"
                           (opengoal " ")
                        )
                        (branch "Exceptional Post (ClassCastException)"
                           (builtin "One Step Simplification" (formula "31"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "21") (term "0,0,1,0,1,0,1") (ifseqformula "13"))
                           (rule "andLeft" (formula "21"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1,0,0") (ifseqformula "21"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1,0,0") (ifseqformula "13"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "1,1,0,1,0") (ifseqformula "21"))
                           (rule "selectCreatedOfAnonAsFormulaEQ" (formula "22") (term "0,1,1,0,1,0") (ifseqformula "13"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "24"))
                           (rule "andLeft" (formula "23"))
                           (rule "andLeft" (formula "22"))
                           (rule "andLeft" (formula "24"))
                           (rule "notLeft" (formula "22"))
                           (rule "notLeft" (formula "23"))
                           (rule "andLeft" (formula "23"))
                           (rule "notLeft" (formula "23"))
                           (rule "orRight" (formula "27"))
                           (rule "replace_known_right" (formula "25") (term "0") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "true_left" (formula "25"))
                           (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "29"))
                           (builtin "One Step Simplification" (formula "25"))
                           (rule "andLeft" (formula "25"))
                           (rule "replace_known_right" (formula "23") (term "1,0") (ifseqformula "28"))
                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "27")))
                           (rule "commute_or_2" (formula "22"))
                           (rule "tryCatchThrow" (formula "40") (term "1"))
                           (rule "ifElseUnfold" (formula "40") (term "1") (inst "#boolv=x"))
                           (rule "variableDeclaration" (formula "40") (term "1") (newnames "x_2"))
                           (rule "equality_comparison_simple" (formula "40") (term "1"))
                           (builtin "One Step Simplification" (formula "40"))
                           (rule "replace_known_right" (formula "40") (term "0,0,1,0") (ifseqformula "30"))
                           (builtin "One Step Simplification" (formula "40"))
                           (rule "ifElseSplit" (formula "40"))
                           (branch "if x_2 true"
                              (opengoal " ")
                           )
                           (branch "if x_2 false"
                              (builtin "One Step Simplification" (formula "41"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "ifElseSplit" (formula "40"))
                              (branch "if exc_1 instanceof CloneNotSupportedException true"
                                 (opengoal " ")
                              )
                              (branch "if exc_1 instanceof CloneNotSupportedException false"
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "31")))
                                 (rule "notLeft" (formula "1"))
                                 (rule "blockThrow" (formula "41") (term "1"))
                                 (rule "methodCallParamThrow" (formula "41") (term "1"))
                                 (rule "tryCatchThrow" (formula "41") (term "1"))
                                 (rule "ifElseUnfold" (formula "41") (term "1") (inst "#boolv=x"))
                                 (rule "variableDeclaration" (formula "41") (term "1") (newnames "x_3"))
                                 (rule "equality_comparison_simple" (formula "41") (term "1"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "replace_known_right" (formula "41") (term "0,0,1,0") (ifseqformula "31"))
                                 (builtin "One Step Simplification" (formula "41"))
                                 (rule "ifElseSplit" (formula "41"))
                                 (branch "if x_3 true"
                                    (opengoal " ")
                                 )
                                 (branch "if x_3 false"
                                    (builtin "One Step Simplification" (formula "42"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "ifElseSplit" (formula "41"))
                                    (branch "if exc_1 instanceof java.lang.Throwable true"
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                                       (rule "true_left" (formula "1"))
                                       (rule "variableDeclaration" (formula "41") (term "1") (newnames "e_1"))
                                       (rule "delete_unnecessary_cast" (formula "41") (term "1"))
                                       (branch "Normal Execution (exc_1 instanceof java.lang.Throwable)"
                                          (builtin "One Step Simplification" (formula "42"))
                                          (builtin "One Step Simplification" (formula "1"))
                                          (rule "true_left" (formula "1"))
                                          (rule "assignment" (formula "41") (term "1"))
                                          (builtin "One Step Simplification" (formula "41"))
                                          (rule "emptyModality" (formula "41") (term "1"))
                                          (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "31")) (ifInst ""  (formula "31")) (ifInst ""  (formula "26")))
                                          (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "41") (inst "sk=sk_13") (ifseqformula "8"))
                                          (branch "Use Axiom"
                                             (rule "nonNull" (formula "41") (term "0,0") (inst "i=i"))
                                             (rule "sub_literals" (formula "41") (term "2,1,0,1,1,0,0"))
                                             (builtin "One Step Simplification" (formula "41"))
                                             (rule "greater_literals" (formula "41") (term "0,1,0,0"))
                                             (builtin "One Step Simplification" (formula "41"))
                                             (rule "inEqSimp_ltToLeq" (formula "41") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "41") (term "1,0,0,1,0,0,1,0,0"))
                                             (rule "inEqSimp_commuteLeq" (formula "41") (term "0,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulComm0" (formula "41") (term "1,1,0,0,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "41") (term "1,1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "41") (term "0,1,1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "41") (term "1,1,1,0,0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "41") (term "1,1,1,0,0,1,0,0"))
                                             (rule "pullOutSelect" (formula "41") (term "0,0,0,0,0") (inst "selectSK=java_util_VerifiedIdentityHashMap_table_2"))
                                             (rule "applyEq" (formula "42") (term "0,1,1,1,0,0,1,0,0") (ifseqformula "1"))
                                             (rule "applyEq" (formula "42") (term "1,0,0,1,0,1,0,0") (ifseqformula "1"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                                             (rule "replaceKnownSelect_taclet0000_2" (formula "1") (term "2,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet10000000_5" (formula "1") (term "2,0"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "14"))
                                             (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "8"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0") (ifseqformula "14"))
                                             (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "8"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "applyEqReverse" (formula "42") (term "1,0,0,1,0,1,0,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "42") (term "0,0,0,0,0") (ifseqformula "1"))
                                             (rule "applyEqReverse" (formula "42") (term "0,1,1,1,0,0,1,0,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "pullOutSelect" (formula "41") (term "0,0,1,0") (inst "selectSK=java_util_VerifiedIdentityHashMap_NULL_KEY_2"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "replaceKnownSelect_taclet0000_0" (formula "1") (term "2,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet10000000_3" (formula "1") (term "2,0"))
                                             (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "applyEqReverse" (formula "42") (term "0,0,1,0") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "pullOutSelect" (formula "41") (term "0,0,1") (inst "selectSK=java_util_VerifiedIdentityHashMap_entrySet_2"))
                                             (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "22"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                                             (rule "replaceKnownSelect_taclet0000_1" (formula "1") (term "2,0"))
                                             (rule "replaceKnownAuxiliaryConstant_taclet10000000_4" (formula "1") (term "2,0"))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,1,0,0") (ifseqformula "14"))
                                             (rule "replace_known_left" (formula "1") (term "0,0,1,0,0") (ifseqformula "8"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                                             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "39")))
                                             (rule "selectCreatedOfAnonAsFormulaEQ" (formula "1") (term "0,0") (ifseqformula "14"))
                                             (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "8"))
                                             (builtin "One Step Simplification" (formula "1"))
                                             (rule "applyEqReverse" (formula "42") (term "0,0,1") (ifseqformula "1"))
                                             (rule "hideAuxiliaryEq" (formula "1"))
                                             (rule "nnf_imp2or" (formula "41") (term "0,1,0,0"))
                                             (rule "nnf_notAnd" (formula "41") (term "0,0,1,0,0"))
                                             (rule "inEqSimp_notLeq" (formula "41") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_rightDist" (formula "41") (term "1,0,0,1,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "41") (term "0,1,0,0,1,0,0,1,0,0"))
                                             (rule "polySimp_addAssoc" (formula "41") (term "0,0,1,0,0,1,0,0"))
                                             (rule "add_literals" (formula "41") (term "0,0,0,1,0,0,1,0,0"))
                                             (rule "add_zero_left" (formula "41") (term "0,0,1,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial1" (formula "41") (term "1,0,0,1,0,0"))
                                             (rule "polySimp_mulLiterals" (formula "41") (term "1,1,0,0,1,0,0"))
                                             (rule "polySimp_elimOne" (formula "41") (term "1,1,0,0,1,0,0"))
                                             (rule "inEqSimp_notGeq" (formula "41") (term "0,0,0,1,0,0"))
                                             (rule "times_zero_1" (formula "41") (term "1,0,0,0,0,0,1,0,0"))
                                             (rule "add_zero_right" (formula "41") (term "0,0,0,0,0,1,0,0"))
                                             (rule "inEqSimp_sepPosMonomial0" (formula "41") (term "0,0,0,1,0,0"))
                                             (rule "mul_literals" (formula "41") (term "1,0,0,0,1,0,0"))
                                             (rule "cut_direct" (formula "26") (term "0"))
                                             (branch "CUT: java.lang.Error::instance(exc_1) = TRUE TRUE"
                                                (opengoal " ")
                                             )
                                             (branch "CUT: java.lang.Error::instance(exc_1) = TRUE FALSE"
                                                (builtin "One Step Simplification" (formula "26"))
                                                (rule "instanceof_not_compatible_5" (formula "28") (ifseqformula "26"))
                                                (rule "instanceof_not_compatible_5" (formula "27") (ifseqformula "26"))
                                                (rule "cut_direct" (formula "22") (term "0,0"))
                                                (branch "CUT: exc_1.<created> = TRUE TRUE"
                                                   (opengoal " ")
                                                )
                                                (branch "CUT: exc_1.<created> = TRUE FALSE"
                                                   (builtin "One Step Simplification" (formula "22"))
                                                   (rule "cut_direct" (formula "15") (term "0"))
                                                   (branch "CUT: result_0.<created> = TRUE TRUE"
                                                      (opengoal " ")
                                                   )
                                                   (branch "CUT: result_0.<created> = TRUE FALSE"
                                                      (builtin "One Step Simplification" (formula "15"))
                                                      (rule "arrayLengthNotNegative" (formula "42") (term "1,1,0,0,1,0,0"))
                                                      (rule "arrayLengthIsAnInt" (formula "43") (term "1,1,0,0,1,0,0"))
                                                      (builtin "One Step Simplification" (formula "1"))
                                                      (rule "true_left" (formula "1"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "43") (term "0,1,1,0,0,1,0,0") (ifseqformula "21"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "44") (term "0,0,1") (ifseqformula "22"))
                                                      (rule "onlyCreatedObjectsAreReferenced" (formula "45") (term "0,0,1,0") (ifseqformula "23"))
                                                      (rule "cut_direct" (formula "46") (term "0,0,0,0"))
                                                      (branch "CUT: self.table@anon_heap_ClassCastException<<anonHeapFunction>> = null TRUE"
                                                         (opengoal " ")
                                                      )
                                                      (branch "CUT: self.table@anon_heap_ClassCastException<<anonHeapFunction>> = null FALSE"
                                                         (builtin "One Step Simplification" (formula "47"))
                                                         (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "46"))
                                                         (builtin "One Step Simplification" (formula "3"))
                                                         (rule "cut_direct" (formula "2") (term "0"))
                                                         (branch "CUT: self.entrySet@anon_heap_ClassCastException<<anonHeapFunction>> = null TRUE"
                                                            (opengoal " ")
                                                         )
                                                         (branch "CUT: self.entrySet@anon_heap_ClassCastException<<anonHeapFunction>> = null FALSE"
                                                            (builtin "One Step Simplification" (formula "2"))
                                                            (rule "replace_known_right" (formula "48") (term "0,1") (ifseqformula "31"))
                                                            (builtin "One Step Simplification" (formula "48"))
                                                            (rule "cut_direct" (formula "1") (term "0"))
                                                            (branch "CUT: java.util.VerifiedIdentityHashMap.NULL_KEY@anon_heap_ClassCastException<<anonHeapFunction>> = null TRUE"
                                                               (opengoal " ")
                                                            )
                                                            (branch "CUT: java.util.VerifiedIdentityHashMap.NULL_KEY@anon_heap_ClassCastException<<anonHeapFunction>> = null FALSE"
                                                               (builtin "One Step Simplification" (formula "1"))
                                                               (rule "replace_known_right" (formula "49") (term "0,1") (ifseqformula "31"))
                                                               (builtin "One Step Simplification" (formula "49"))
                                                               (rule "allRight" (formula "49") (inst "sk=i_2"))
                                                               (rule "orRight" (formula "49"))
                                                               (rule "notRight" (formula "50"))
                                                               (rule "orRight" (formula "50"))
                                                               (rule "inEqSimp_leqRight" (formula "50"))
                                                               (rule "mul_literals" (formula "1") (term "1,0,0"))
                                                               (rule "add_literals" (formula "1") (term "0,0"))
                                                               (rule "add_zero_left" (formula "1") (term "0"))
                                                               (rule "inEqSimp_geqRight" (formula "51"))
                                                               (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                               (rule "polySimp_addComm1" (formula "1") (term "0"))
                                                               (rule "inEqSimp_sepNegMonomial0" (formula "1"))
                                                               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                                                               (rule "polySimp_elimOne" (formula "1") (term "0"))
                                                               (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=arr_1"))
                                                               (rule "simplifySelectOfAnonEQ" (formula "3") (ifseqformula "29"))
                                                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")))
                                                               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,1,0,0") (ifseqformula "21"))
                                                               (rule "applyEqRigid" (formula "3") (term "1") (ifseqformula "4"))
                                                               (rule "ifEqualsNull" (formula "3"))
                                                               (rule "elementOfSetMinus" (formula "3") (term "0,0,0,1"))
                                                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "52")))
                                                               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0,0,0,1") (ifseqformula "21"))
                                                               (builtin "One Step Simplification" (formula "3"))
                                                               (rule "andLeft" (formula "3"))
                                                               (rule "elementOfSetMinus" (formula "3") (term "0"))
                                                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "53")))
                                                               (rule "selectCreatedOfAnonAsFormulaEQ" (formula "3") (term "0") (ifseqformula "22"))
                                                               (builtin "One Step Simplification" (formula "3"))
                                                               (rule "true_left" (formula "3"))
                                                               (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "0") (ifseqformula "28"))
                                                               (rule "replace_known_left" (formula "3") (term "0") (ifseqformula "4"))
                                                               (builtin "One Step Simplification" (formula "3"))
                                                               (rule "true_left" (formula "3"))
                                                               (rule "allLeft" (formula "19") (inst "t=i_2"))
                                                               (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                                                               (rule "inEqSimp_contradInEq1" (formula "19") (term "1,0") (ifseqformula "2"))
                                                               (rule "qeq_literals" (formula "19") (term "0,1,0"))
                                                               (builtin "One Step Simplification" (formula "19"))
                                                               (rule "cut_direct" (formula "19") (term "1"))
                                                               (branch "CUT: self.table.length <= i_2 TRUE"
                                                                  (opengoal " ")
                                                               )
                                                               (branch "CUT: self.table.length <= i_2 FALSE"
                                                                  (builtin "One Step Simplification" (formula "19"))
                                                                  (rule "notLeft" (formula "19"))
                                                                  (rule "inEqSimp_leqRight" (formula "36"))
                                                                  (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
                                                                  (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                                                                  (rule "polySimp_mulComm0" (formula "1") (term "1"))
                                                                  (rule "polySimp_rightDist" (formula "1") (term "1"))
                                                                  (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
                                                                  (rule "mul_literals" (formula "1") (term "0,1"))
                                                                  (rule "polySimp_elimOne" (formula "1") (term "1,1"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "36") (term "0") (ifseqformula "15"))
                                                                  (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "37"))
                                                                  (builtin "One Step Simplification" (formula "1"))
                                                                  (rule "allLeft" (formula "28") (inst "t=i_2"))
                                                                  (rule "inEqSimp_commuteGeq" (formula "28") (term "1"))
                                                                  (rule "inEqSimp_contradInEq1" (formula "28") (term "1,0") (ifseqformula "4"))
                                                                  (rule "qeq_literals" (formula "28") (term "0,1,0"))
                                                                  (builtin "One Step Simplification" (formula "28"))
                                                                  (rule "pullOutSelect" (formula "28") (term "0,0,0") (inst "selectSK=arr_2"))
                                                                  (rule "simplifySelectOfAnonEQ" (formula "28") (ifseqformula "23"))
                                                                  (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "48")))
                                                                  (rule "elementOfSetMinus" (formula "28") (term "0,0,0"))
                                                                  (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "48")))
                                                                  (rule "applyEqReverse" (formula "29") (term "0,0,0") (ifseqformula "28"))
                                                                  (rule "hideAuxiliaryEq" (formula "28"))
                                                                  (rule "onlyCreatedObjectsAreReferenced" (formula "28") (term "0,0,0") (ifseqformula "22"))
                                                                  (rule "cut_direct" (formula "34") (term "0"))
                                                                  (branch "CUT: exc_1.<created>@anon_heap_ClassCastException<<anonHeapFunction>> = TRUE TRUE"
                                                                     (opengoal " ")
                                                                  )
                                                                  (branch "CUT: exc_1.<created>@anon_heap_ClassCastException<<anonHeapFunction>> = TRUE FALSE"
                                                                     (builtin "One Step Simplification" (formula "34"))
                                                                     (rule "cut_direct" (formula "28") (term "0"))
                                                                     (branch "CUT: self.table[i_2]@anon_heap_clone<<anonHeapFunction>> = null TRUE"
                                                                        (opengoal " ")
                                                                     )
                                                                     (branch "CUT: self.table[i_2]@anon_heap_clone<<anonHeapFunction>> = null FALSE"
                                                                        (builtin "One Step Simplification" (formula "28"))
                                                                        (rule "replace_known_right" (formula "29") (term "0,0") (ifseqformula "39"))
                                                                        (builtin "One Step Simplification" (formula "29"))
                                                                        (rule "true_left" (formula "29"))
                                                                        (opengoal " ")
                                                                     )
                                                                  )
                                                               )
                                                            )
                                                         )
                                                      )
                                                   )
                                                )
                                             )
                                          )
                                          (branch "Show Axiom Satisfiability"
                                             (builtin "One Step Simplification" (formula "41"))
                                             (rule "closeTrue" (formula "41"))
                                          )
                                       )
                                       (branch "ClassCastException (!(exc_1 instanceof java.lang.Throwable))"
                                          (builtin "One Step Simplification" (formula "41"))
                                          (rule "closeTrue" (formula "41"))
                                       )
                                    )
                                    (branch "if exc_1 instanceof java.lang.Throwable false"
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "32")))
                                       (rule "closeFalse" (formula "1"))
                                    )
                                 )
                              )
                           )
                        )
                        (branch "Pre (ClassCastException)"
                           (builtin "One Step Simplification" (formula "29"))
                           (rule "wellFormedAnonEQ" (formula "29") (ifseqformula "13"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "6"))
                           (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "12")))
                           (rule "closeTrue" (formula "29"))
                        )
                     )
                  )
                  (branch "Show Axiom Satisfiability"
                     (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "17")) (ifInst ""  (formula "18")) (ifInst ""  (formula "17")) (ifInst ""  (formula "18")))
                     (rule "closeTrue" (formula "15"))
                  )
               )
               (branch "Show Axiom Satisfiability"
                  (builtin "One Step Simplification" (formula "15"))
                  (rule "closeTrue" (formula "15"))
               )
            )
            (branch "Show Axiom Satisfiability"
               (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "17")) (ifInst ""  (formula "18")) (ifInst ""  (formula "17")) (ifInst ""  (formula "18")))
               (rule "closeTrue" (formula "15"))
            )
         )
         (branch "Show Axiom Satisfiability"
            (builtin "One Step Simplification" (formula "12"))
            (rule "closeTrue" (formula "12"))
         )
      )
      (branch "Show Axiom Satisfiability"
         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")))
         (rule "closeTrue" (formula "12"))
      )
   )
   (branch "Exceptional Post (clone)"
      (builtin "One Step Simplification" (formula "12"))
      (builtin "One Step Simplification" (formula "7"))
      (rule "andLeft" (formula "7"))
      (rule "selectCreatedOfAnonAsFormulaEQ" (formula "8") (term "1,0") (ifseqformula "7"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "10"))
      (rule "notLeft" (formula "8"))
      (rule "replace_known_right" (formula "9") (term "0,0,1") (ifseqformula "11"))
      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "11")))
      (rule "replace_known_right" (formula "10") (term "0,0,1") (ifseqformula "11"))
      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "11")))
      (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "7") (term "0,1,0") (inst "sk=sk_2") (ifseqformula "3"))
      (branch "Use Axiom"
         (rule "replace_known_right" (formula "7") (term "0,1,0,0,1,0") (ifseqformula "13"))
         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "14")))
         (rule "nonNull" (formula "7") (term "0,1,0") (inst "i=i"))
         (rule "sub_literals" (formula "7") (term "2,1,0,1,1,0,1,0"))
         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "12")))
         (rule "greater_literals" (formula "7") (term "0,0,1,0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_ltToLeq" (formula "7") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_commuteLeq" (formula "7") (term "0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "7") (term "0,1,1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,1,0,0,0,1,0"))
         (rule "nnf_imp2or" (formula "7") (term "0,0,1,0"))
         (rule "nnf_notAnd" (formula "7") (term "0,0,0,1,0"))
         (rule "inEqSimp_notGeq" (formula "7") (term "0,0,0,0,1,0"))
         (rule "times_zero_1" (formula "7") (term "1,0,0,0,0,0,0,1,0"))
         (rule "add_zero_right" (formula "7") (term "0,0,0,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "7") (term "0,0,0,0,1,0"))
         (rule "mul_literals" (formula "7") (term "1,0,0,0,0,1,0"))
         (rule "inEqSimp_notLeq" (formula "7") (term "1,0,0,0,1,0"))
         (rule "polySimp_rightDist" (formula "7") (term "1,0,0,1,0,0,0,1,0"))
         (rule "mul_literals" (formula "7") (term "0,1,0,0,1,0,0,0,1,0"))
         (rule "polySimp_addAssoc" (formula "7") (term "0,0,1,0,0,0,1,0"))
         (rule "add_literals" (formula "7") (term "0,0,0,1,0,0,0,1,0"))
         (rule "add_zero_left" (formula "7") (term "0,0,1,0,0,0,1,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "7") (term "1,0,0,0,1,0"))
         (rule "polySimp_mulLiterals" (formula "7") (term "1,1,0,0,0,1,0"))
         (rule "polySimp_elimOne" (formula "7") (term "1,1,0,0,0,1,0"))
         (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "9") (term "0") (inst "sk=sk_3") (ifseqformula "3"))
         (branch "Use Axiom"
            (rule "replace_known_right" (formula "9") (term "0,1,0,0") (ifseqformula "13"))
            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "14")))
            (rule "nonNull" (formula "9") (term "0") (inst "i=i"))
            (rule "sub_literals" (formula "9") (term "2,1,0,1,1,0"))
            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "12")))
            (rule "greater_literals" (formula "9") (term "0,0"))
            (builtin "One Step Simplification" (formula "9"))
            (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,0"))
            (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,0"))
            (rule "nnf_imp2or" (formula "9") (term "0,0"))
            (rule "nnf_notAnd" (formula "9") (term "0,0,0"))
            (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,0"))
            (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,0"))
            (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,0"))
            (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,0"))
            (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,0"))
            (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,0"))
            (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,0"))
            (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,0"))
            (rule "add_zero_right" (formula "9") (term "0,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,0"))
            (rule "mul_literals" (formula "9") (term "1,0,0,0,0"))
            (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "10") (term "0") (inst "sk=sk_4") (ifseqformula "3"))
            (branch "Use Axiom"
               (rule "replace_known_right" (formula "10") (term "0,1,0,0") (ifseqformula "13"))
               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "14")))
               (rule "nonNull" (formula "10") (term "0") (inst "i=i"))
               (rule "sub_literals" (formula "10") (term "2,1,0,1,1,0"))
               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")))
               (rule "greater_literals" (formula "10") (term "0,0"))
               (builtin "One Step Simplification" (formula "10"))
               (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,0"))
               (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,0"))
               (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,0"))
               (rule "nnf_imp2or" (formula "10") (term "0,0"))
               (rule "nnf_notAnd" (formula "10") (term "0,0,0"))
               (rule "inEqSimp_notLeq" (formula "10") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1,0,0,0"))
               (rule "mul_literals" (formula "10") (term "0,1,0,0,1,0,0,0"))
               (rule "polySimp_addAssoc" (formula "10") (term "0,0,1,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,1,0,0,0"))
               (rule "add_zero_left" (formula "10") (term "0,0,1,0,0,0"))
               (rule "inEqSimp_sepPosMonomial1" (formula "10") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,0"))
               (rule "inEqSimp_notGeq" (formula "10") (term "0,0,0,0"))
               (rule "times_zero_1" (formula "10") (term "1,0,0,0,0,0,0"))
               (rule "add_literals" (formula "10") (term "0,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,0,0"))
               (rule "mul_literals" (formula "10") (term "1,0,0,0,0"))
               (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "10") (term "0,1") (inst "sk=sk_5") (ifseqformula "3"))
               (branch "Use Axiom"
                  (rule "nonNull" (formula "10") (term "0,0,0,1") (inst "i=i"))
                  (rule "greater_literals" (formula "10") (term "0,1,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "sub_literals" (formula "10") (term "2,1,0,1,0,0,0,1"))
                  (builtin "One Step Simplification" (formula "10"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "10") (term "0,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,1,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "10") (term "0,1,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,1,0,0,1,0,0,0,1"))
                  (rule "pullOutSelect" (formula "10") (term "0,0,1,0,1") (inst "selectSK=java_util_VerifiedIdentityHashMap_entrySet_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "10") (ifseqformula "7"))
                  (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "16")) (ifInst ""  (formula "2")))
                  (rule "pullOutSelect" (formula "11") (term "0,0,1,0,0,1") (inst "selectSK=java_util_VerifiedIdentityHashMap_NULL_KEY_0"))
                  (rule "simplifySelectOfAnonEQ" (formula "11") (ifseqformula "7"))
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "pullOutSelect" (formula "12") (term "0,0,0,0,0,0,1") (inst "selectSK=java_util_VerifiedIdentityHashMap_table_0"))
                  (rule "applyEq" (formula "13") (term "1,0,0,1,0,1,0,0,0,1") (ifseqformula "12"))
                  (rule "applyEq" (formula "13") (term "0,1,1,1,0,0,1,0,0,0,1") (ifseqformula "12"))
                  (rule "simplifySelectOfAnonEQ" (formula "12") (ifseqformula "7"))
                  (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "18")) (ifInst ""  (formula "2")))
                  (rule "nnf_imp2or" (formula "13") (term "0,1,0,0,0,1"))
                  (rule "nnf_notAnd" (formula "13") (term "0,0,1,0,0,0,1"))
                  (rule "inEqSimp_notLeq" (formula "13") (term "1,0,0,1,0,0,0,1"))
                  (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "13") (term "0,1,0,0,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_addAssoc" (formula "13") (term "0,0,1,0,0,1,0,0,0,1"))
                  (rule "add_literals" (formula "13") (term "0,0,0,1,0,0,1,0,0,0,1"))
                  (rule "add_zero_left" (formula "13") (term "0,0,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "13") (term "1,0,0,1,0,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1,0,0,0,1"))
                  (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_notGeq" (formula "13") (term "0,0,0,1,0,0,0,1"))
                  (rule "times_zero_1" (formula "13") (term "1,0,0,0,0,0,1,0,0,0,1"))
                  (rule "add_literals" (formula "13") (term "0,0,0,0,0,1,0,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,0,1,0,0,0,1"))
                  (rule "mul_literals" (formula "13") (term "1,0,0,0,1,0,0,0,1"))
                  (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "9") (term "0,1") (inst "sk=sk_6") (ifseqformula "3"))
                  (branch "Use Axiom"
                     (rule "replaceKnownSelect_taclet000010_0" (formula "9") (term "0,0,1,0,1"))
                     (rule "replaceKnownSelect_taclet000010_2" (formula "9") (term "1,0,0,0,1"))
                     (rule "replaceKnownSelect_taclet000010_1" (formula "9") (term "0,0,1,0,0,1"))
                     (rule "nonNull" (formula "9") (term "0,0,0,1") (inst "i=i"))
                     (rule "greater_literals" (formula "9") (term "0,1,0,0,0,1"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "sub_literals" (formula "9") (term "2,1,0,1,0,0,0,1"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "inEqSimp_ltToLeq" (formula "9") (term "1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_commuteLeq" (formula "9") (term "0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,1,0,0,1,0,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,1,0,0,1,0,0,0,1"))
                     (rule "nnf_imp2or" (formula "9") (term "0,1,0,0,0,1"))
                     (rule "nnf_notAnd" (formula "9") (term "0,0,1,0,0,0,1"))
                     (rule "inEqSimp_notLeq" (formula "9") (term "1,0,0,1,0,0,0,1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1,0,0,1,0,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "0,1,0,0,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_addAssoc" (formula "9") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "add_literals" (formula "9") (term "0,0,0,1,0,0,1,0,0,0,1"))
                     (rule "add_zero_left" (formula "9") (term "0,0,1,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "9") (term "1,0,0,1,0,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1,0,0,0,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_notGeq" (formula "9") (term "0,0,0,1,0,0,0,1"))
                     (rule "times_zero_1" (formula "9") (term "1,0,0,0,0,0,1,0,0,0,1"))
                     (rule "add_literals" (formula "9") (term "0,0,0,0,0,1,0,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,0,1,0,0,0,1"))
                     (rule "mul_literals" (formula "9") (term "1,0,0,0,1,0,0,0,1"))
                     (rule "commute_or_2" (formula "7") (term "0,0,1,0"))
                     (rule "tryCatchThrow" (formula "19") (term "1"))
                     (rule "commute_or_2" (formula "13") (term "1,1"))
                     (rule "commute_or_2" (formula "13") (term "0,0"))
                     (rule "commute_or_2" (formula "9") (term "0,0"))
                     (rule "commute_or_2" (formula "10") (term "0,0,2,0,0"))
                     (rule "commute_or_2" (formula "11") (term "0,0,2,0,0"))
                     (rule "commute_or_2" (formula "12") (term "0,0,2,0,0"))
                     (rule "commute_or" (formula "13") (term "0,1,1"))
                     (rule "commute_or" (formula "13") (term "0,0,0"))
                     (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "5"))
                     (builtin "One Step Simplification" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "13"))
                     (rule "notLeft" (formula "15"))
                     (rule "notLeft" (formula "14"))
                     (rule "andLeft" (formula "13"))
                     (rule "notLeft" (formula "13"))
                     (rule "replace_known_right" (formula "9") (term "0,1,0,0,1") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "15")) (ifInst ""  (formula "13")) (ifInst ""  (formula "17")))
                     (rule "commute_or_2" (formula "13") (term "0"))
                     (rule "commute_or" (formula "13") (term "0,0"))
                     (rule "commute_or" (formula "9") (term "0,0,0"))
                     (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "5"))
                     (builtin "One Step Simplification" (formula "9"))
                     (rule "commute_or" (formula "7") (term "0,0,0,1,0"))
                     (rule "replace_known_left" (formula "7") (term "0,1,0") (ifseqformula "5"))
                     (builtin "One Step Simplification" (formula "7"))
                     (rule "commute_or" (formula "10") (term "0,0,0,2,0,0"))
                     (rule "replace_known_left" (formula "10") (term "0,2,0,0") (ifseqformula "5"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "elementOfSetMinus" (formula "10") (term "0,0"))
                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "22")) (ifInst ""  (formula "2")))
                     (rule "applyEqReverse" (formula "17") (term "0") (ifseqformula "10"))
                     (rule "hideAuxiliaryEq" (formula "10"))
                     (rule "commute_or" (formula "10") (term "0,0,0,2,0,0"))
                     (rule "replace_known_left" (formula "10") (term "0,2,0,0") (ifseqformula "5"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "elementOfSetMinus" (formula "10") (term "0,0"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "applyEqReverse" (formula "15") (term "0") (ifseqformula "10"))
                     (rule "hideAuxiliaryEq" (formula "10"))
                     (rule "commute_or" (formula "10") (term "0,0,0,2,0,0"))
                     (rule "replace_known_left" (formula "10") (term "0,2,0,0") (ifseqformula "5"))
                     (builtin "One Step Simplification" (formula "10"))
                     (rule "elementOfSetMinus" (formula "10") (term "0,0"))
                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "20")) (ifInst ""  (formula "2")))
                     (rule "applyEqReverse" (formula "11") (term "1,0,0,0,0,0") (ifseqformula "10"))
                     (rule "applyEqReverse" (formula "13") (term "0") (ifseqformula "10"))
                     (rule "applyEqReverse" (formula "11") (term "0,1,1,0") (ifseqformula "10"))
                     (rule "hideAuxiliaryEq" (formula "10"))
                     (rule "arrayLengthNotNegative" (formula "5") (term "1,1,0"))
                     (rule "arrayLengthIsAnInt" (formula "6") (term "1,1,0"))
                     (builtin "One Step Simplification" (formula "6"))
                     (rule "true_left" (formula "6"))
                     (rule "ifElseUnfold" (formula "21") (term "1") (inst "#boolv=x"))
                     (rule "variableDeclaration" (formula "21") (term "1") (newnames "x"))
                     (rule "equality_comparison_simple" (formula "21") (term "1"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "replace_known_right" (formula "21") (term "0,0,1,0") (ifseqformula "16"))
                     (builtin "One Step Simplification" (formula "21"))
                     (rule "ifElseSplit" (formula "21"))
                     (branch "if x true"
                        (builtin "One Step Simplification" (formula "22"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                     (branch "if x false"
                        (builtin "One Step Simplification" (formula "22"))
                        (builtin "One Step Simplification" (formula "1"))
                        (rule "true_left" (formula "1"))
                        (rule "ifElseSplit" (formula "21"))
                        (branch "if exc_0 instanceof CloneNotSupportedException true"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                           (rule "instanceof_not_compatible_5" (formula "13") (term "1") (ifseqformula "1"))
                           (rule "instanceof_not_compatible_5" (formula "11") (term "1") (ifseqformula "1"))
                           (rule "instanceof_not_compatible_5" (formula "11") (term "0") (ifseqformula "1"))
                           (rule "instanceof_not_compatible_5" (formula "13") (term "1,0") (ifseqformula "1"))
                           (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "17")) (ifInst ""  (formula "17")))
                           (rule "closeFalse" (formula "11"))
                        )
                        (branch "if exc_0 instanceof CloneNotSupportedException false"
                           (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                           (rule "notLeft" (formula "1"))
                           (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "13"))
                           (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "10")))
                           (rule "true_left" (formula "12"))
                           (rule "blockThrow" (formula "21") (term "1"))
                           (rule "methodCallParamThrow" (formula "21") (term "1"))
                           (rule "tryCatchThrow" (formula "21") (term "1"))
                           (rule "ifElseUnfold" (formula "21") (term "1") (inst "#boolv=x"))
                           (rule "variableDeclaration" (formula "21") (term "1") (newnames "x_1"))
                           (rule "equality_comparison_simple" (formula "21") (term "1"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "replace_known_right" (formula "21") (term "0,0,1,0") (ifseqformula "16"))
                           (builtin "One Step Simplification" (formula "21"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "1"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "19"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "2"))
                           (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                           (builtin "One Step Simplification" (formula "1"))
                           (rule "ifElseSplit" (formula "23"))
                           (branch "if x_1 true"
                              (builtin "One Step Simplification" (formula "24"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "if x_1 false"
                              (builtin "One Step Simplification" (formula "24"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "true_left" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "3"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "20"))
                              (builtin "One Step Simplification" (formula "1"))
                              (rule "ifElseSplit" (formula "24"))
                              (branch "if exc_0 instanceof java.lang.Throwable true"
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                                 (rule "true_left" (formula "1"))
                                 (rule "variableDeclaration" (formula "24") (term "1") (newnames "e"))
                                 (rule "delete_unnecessary_cast" (formula "24") (term "1"))
                                 (branch "Normal Execution (exc_0 instanceof java.lang.Throwable)"
                                    (builtin "One Step Simplification" (formula "25"))
                                    (builtin "One Step Simplification" (formula "1"))
                                    (rule "true_left" (formula "1"))
                                    (rule "assignment" (formula "24") (term "1"))
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "emptyModality" (formula "24") (term "1"))
                                    (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "19")) (ifInst ""  (formula "19")) (ifInst ""  (formula "13")))
                                    (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "24") (inst "sk=sk_7") (ifseqformula "6"))
                                    (branch "Use Axiom"
                                       (rule "replaceKnownSelect_taclet000010_0" (formula "24") (term "0,0,1"))
                                       (rule "replaceKnownSelect_taclet000010_2" (formula "24") (term "1,0,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000010_3" (formula "24") (term "0,0,1"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000010_5" (formula "24") (term "1,0,0"))
                                       (rule "replaceKnownSelect_taclet000010_1" (formula "24") (term "0,0,1,0"))
                                       (rule "replaceKnownAuxiliaryConstant_taclet0000010_4" (formula "24") (term "0,0,1,0"))
                                       (rule "replace_known_right" (formula "24") (term "0,1,0") (ifseqformula "17"))
                                       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "18")))
                                       (rule "nonNull" (formula "24") (inst "i=i"))
                                       (rule "greater_literals" (formula "24") (term "0,1"))
                                       (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "16")))
                                       (rule "sub_literals" (formula "24") (term "2,1,0"))
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "allRight" (formula "24") (inst "sk=i_1"))
                                       (rule "impRight" (formula "24"))
                                       (rule "notRight" (formula "25"))
                                       (rule "andLeft" (formula "2"))
                                       (rule "inEqSimp_ltToLeq" (formula "3"))
                                       (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
                                       (rule "polySimp_addComm1" (formula "3") (term "0"))
                                       (rule "inEqSimp_commuteLeq" (formula "2"))
                                       (rule "inEqSimp_sepNegMonomial0" (formula "3"))
                                       (rule "polySimp_mulLiterals" (formula "3") (term "0"))
                                       (rule "polySimp_elimOne" (formula "3") (term "0"))
                                       (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=arr_0"))
                                       (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "15"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                                       (rule "applyEq" (formula "1") (term "1") (ifseqformula "2"))
                                       (rule "ifEqualsNull" (formula "1"))
                                       (rule "elementOfSetMinus" (formula "1") (term "0,0,0,1"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                                       (rule "andLeft" (formula "1"))
                                       (rule "elementOfSetMinus" (formula "1") (term "0"))
                                       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
                                       (rule "true_left" (formula "1"))
                                       (rule "arrayLengthIsAnInt" (formula "18") (term "1,1,0"))
                                       (builtin "One Step Simplification" (formula "18"))
                                       (rule "true_left" (formula "18"))
                                       (rule "arrayLengthNotNegative" (formula "18") (term "1,1,0"))
                                       (rule "allLeft" (formula "19") (inst "t=i_1"))
                                       (rule "replaceKnownSelect_taclet0001110000010_6" (formula "19") (term "0,0,0,0"))
                                       (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "2"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_commuteGeq" (formula "19") (term "1"))
                                       (rule "inEqSimp_contradInEq1" (formula "19") (term "0") (ifseqformula "3"))
                                       (rule "qeq_literals" (formula "19") (term "0,0"))
                                       (builtin "One Step Simplification" (formula "19"))
                                       (rule "inEqSimp_contradInEq1" (formula "19") (ifseqformula "4"))
                                       (rule "andLeft" (formula "19"))
                                       (rule "inEqSimp_homoInEq1" (formula "19"))
                                       (rule "polySimp_pullOutFactor1b" (formula "19") (term "0"))
                                       (rule "add_literals" (formula "19") (term "1,1,0"))
                                       (rule "times_zero_1" (formula "19") (term "1,0"))
                                       (rule "add_zero_right" (formula "19") (term "0"))
                                       (rule "leq_literals" (formula "19"))
                                       (rule "closeFalse" (formula "19"))
                                    )
                                    (branch "Show Axiom Satisfiability"
                                       (builtin "One Step Simplification" (formula "24"))
                                       (rule "closeTrue" (formula "24"))
                                    )
                                 )
                                 (branch "ClassCastException (!(exc_0 instanceof java.lang.Throwable))"
                                    (builtin "One Step Simplification" (formula "24"))
                                    (rule "closeTrue" (formula "24"))
                                 )
                              )
                              (branch "if exc_0 instanceof java.lang.Throwable false"
                                 (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                        )
                     )
                  )
                  (branch "Show Axiom Satisfiability"
                     (builtin "One Step Simplification" (formula "14"))
                     (rule "closeTrue" (formula "14"))
                  )
               )
               (branch "Show Axiom Satisfiability"
                  (builtin "One Step Simplification" (formula "11"))
                  (rule "closeTrue" (formula "11"))
               )
            )
            (branch "Show Axiom Satisfiability"
               (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")))
               (rule "closeTrue" (formula "11"))
            )
         )
         (branch "Show Axiom Satisfiability"
            (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")))
            (rule "closeTrue" (formula "11"))
         )
      )
      (branch "Show Axiom Satisfiability"
         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "14")) (ifInst ""  (formula "15")) (ifInst ""  (formula "14")) (ifInst ""  (formula "15")))
         (rule "closeTrue" (formula "11"))
      )
   )
   (branch "Pre (clone)"
      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")))
      (rule "Class_invariant_axiom_for_java_util_VerifiedIdentityHashMap" (formula "10") (inst "sk=sk_1") (ifseqformula "3"))
      (branch "Use Axiom"
         (rule "replace_known_right" (formula "10") (term "0,1") (ifseqformula "8"))
         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "7")))
         (rule "nonNull" (formula "10") (inst "i=i"))
         (rule "sub_literals" (formula "10") (term "2,1,0,1,1"))
         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "6")))
         (rule "greater_literals" (formula "10") (term "0"))
         (builtin "One Step Simplification" (formula "10"))
         (rule "allRight" (formula "10") (inst "sk=i_0"))
         (rule "impRight" (formula "10"))
         (rule "andLeft" (formula "1"))
         (rule "notRight" (formula "12"))
         (rule "inEqSimp_ltToLeq" (formula "3"))
         (rule "polySimp_mulComm0" (formula "3") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "3") (term "0"))
         (rule "inEqSimp_commuteLeq" (formula "2"))
         (rule "inEqSimp_sepNegMonomial0" (formula "3"))
         (rule "polySimp_mulLiterals" (formula "3") (term "0"))
         (rule "polySimp_elimOne" (formula "3") (term "0"))
         (rule "allLeft" (formula "8") (inst "t=i_0"))
         (rule "replace_known_left" (formula "8") (term "0,0,0") (ifseqformula "1"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "inEqSimp_commuteGeq" (formula "8") (term "1"))
         (rule "inEqSimp_contradInEq1" (formula "8") (term "0") (ifseqformula "2"))
         (rule "qeq_literals" (formula "8") (term "0,0"))
         (builtin "One Step Simplification" (formula "8"))
         (rule "inEqSimp_contradInEq1" (formula "8") (ifseqformula "3"))
         (rule "andLeft" (formula "8"))
         (rule "inEqSimp_homoInEq1" (formula "8"))
         (rule "polySimp_pullOutFactor1b" (formula "8") (term "0"))
         (rule "add_literals" (formula "8") (term "1,1,0"))
         (rule "times_zero_1" (formula "8") (term "1,0"))
         (rule "add_literals" (formula "8") (term "0"))
         (rule "leq_literals" (formula "8"))
         (rule "closeFalse" (formula "8"))
      )
      (branch "Show Axiom Satisfiability"
         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "7")) (ifInst ""  (formula "8")))
         (rule "closeTrue" (formula "10"))
      )
   )
)
(branch "Show Axiom Satisfiability"
   (builtin "One Step Simplification" (formula "6"))
   (rule "closeTrue" (formula "6"))
)
)

}
