<?xml version="1.0" encoding="UTF-8"?>
<proofMetaFile proofFileMD5="a8e0ad332c27225fae100b507283f914" proofClosed="false" proofOutdated="false">
   <markerMessage>
Open Proof:
java.util.VerifiedIdentityHashMap.EntryIterator.Entry[java.util.Map.Entry::getValue()].JML behavior operation contract.0

Reason: Goal can&apos;t be closed automatically.
Hint: Check code and specifications for bugs or continue proof interactively.

Time: 0.506 s
Nodes: 431
Branches: 27
   </markerMessage>
   <calledMethods>
      <calledMethod fullQualifiedName="java.util.VerifiedIdentityHashMap.EntryIterator.Entry#checkIndexForEntryUse()"/>
   </calledMethods>
   <assumptions>
      <assumption kind="Use Contract" name="JML behavior operation contract 0" target="NullPointerException()" type="java.lang.NullPointerException"/>
      <assumption kind="Use Contract" name="JML behavior operation contract 0" target="ArrayIndexOutOfBoundsException()" type="java.lang.ArrayIndexOutOfBoundsException"/>
   </assumptions>
   <references rep="pre: {heap=java.lang.Object::&lt;inv&gt;(heap,self)}; mby: null; post: {heap=and(imp(equals(exc,null),and(java.lang.Object::&lt;inv&gt;(heap,self),not(equals(result,null)))),imp(not(equals(exc,null)),and(imp(equals(java.lang.Throwable::instance(exc),TRUE),java.lang.Object::&lt;inv&gt;(heap,self)),or(equals(java.lang.Error::instance(exc),TRUE),equals(java.lang.RuntimeException::instance(exc),TRUE)))))}; mods: {heap=setMinus(allLocs,freshLocs(heap)), savedHeap=null}; hasMod: {heap=true, savedHeap=true}; termination: diamond; transaction: false">
      <callMethodReferences>
         <callMethodReference kjt="java.util.VerifiedIdentityHashMap.EntryIterator.Entry" name="checkIndexForEntryUse" parameters="" implementations="java.util.VerifiedIdentityHashMap.EntryIterator.Entry;"/>
      </callMethodReferences>
      <type name="java.util.VerifiedIdentityHashMap.EntryIterator.Entry">
         <axiomReferences>
            <axiomReference kjt="java.util.VerifiedIdentityHashMap.EntryIterator.Entry" name="Class invariant axiom for java.util.VerifiedIdentityHashMap.EntryIterator.Entry" rep="equiv(java.lang.Object::&lt;inv&gt;(heap,self),true)"/>
         </axiomReferences>
         <accessReferences>
            <accessReference kjt="java.util.VerifiedIdentityHashMap.EntryIterator.Entry" name="java.util.VerifiedIdentityHashMap.EntryIterator.Entry::index" type="int" visibility="private" isStatic="false" isFinal="false" initializer=""/>
         </accessReferences>
         <inlineMethodReferences>
            <inlineMethodReference kjt="java.util.VerifiedIdentityHashMap.EntryIterator.Entry" name="checkIndexForEntryUse" parameters="" src="private void checkIndexForEntryUse () {if (this.index&lt;0)                     throw  new  IllegalStateException (&quot;Entry was removed&quot;); }"/>
            <inlineMethodReference kjt="java.util.VerifiedIdentityHashMap.EntryIterator.Entry" name="getValue" parameters="" src="publicjava.lang.ObjectgetValue () {checkIndexForEntryUse();return (java.lang.Object)this.traversalTable[this.index+1];}"/>
         </inlineMethodReferences>
      </type>
      <type name="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator">
         <accessReferences>
            <accessReference kjt="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator" name="java.util.VerifiedIdentityHashMap.IdentityHashMapIterator::traversalTable" type="" visibility="" isStatic="false" isFinal="false" initializer=""/>
         </accessReferences>
      </type>
   </references>
</proofMetaFile>
